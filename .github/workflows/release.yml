name: Release

on:
  release:
    types: [ published ]

env:
  TAG_NAME: ${{ github.event.release.tag_name }}

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      app_prefix: ${{ steps.app_prefix.outputs.prefix }}
    steps:
      - name: Set up app prefix
        id: app_prefix
        run: |
          VERSION_NAME="${TAG_NAME#v}"
          PREFIX="PayID-$VERSION_NAME"
          echo "prefix=$PREFIX" >> $GITHUB_OUTPUT

  windows-app:
    name: Create Windows app
    runs-on: windows-latest
    needs: prepare-release
    env:
      APP_PREFIX: ${{ needs.prepare-release.outputs.app_prefix }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
          cache-key: "flutter-:os:-:channel:-:version:-:arch:"
          pub-cache-key: "flutter-pub:os:-:channel:-:version:-:arch:"
          flutter-version: '3.29.2'

      - name: Install fastforge
        run: dart pub global activate fastforge

      - name: Install yq
        shell: pwsh
        run: |
          choco install yq
          yq --version

      - name: Update config
        shell: pwsh
        run: |
          $yamlFile = ".\windows\packaging\exe\make_config.yaml"
          $yamlContent = Get-Content -Raw -Path $yamlFile
          
          # Get app id from env
          $appId = $env:WINDOWS_EXE_APP_ID
          
          # Get app version name from pubspec.yaml
          $appVersion = yq e ".version" .\pubspec.yaml | ForEach-Object { $_ -replace '\+.*', '' }
          
          # Use yq to update the content
          $updatedYamlContent = echo $yamlContent | yq e ".app_id = `"$appId`" | .app_version = `"$appVersion`"" -
          
          # Write the updated content back to the file
          Set-Content -Path $yamlFile -Value $updatedYamlContent
        env:
          WINDOWS_EXE_APP_ID: ${{ secrets.WINDOWS_EXE_APP_ID }}

      - name: Build exe
        shell: pwsh
        run: |
          fastforge package `
          --flutter-build-args "release" `
          --platform windows `
          --targets exe `
          --artifact-name "$env:APP_PREFIX-windows-x64.{{ext}}"

      - name: Signing
        shell: pwsh
        run: |
          $certificatePath = "$env:RUNNER_TEMP\cert.pfx"
          $bytes = echo $env:WINDOWS_CERTIFICATE | %{[Convert]::FromBase64String($_)}
          [IO.File]::WriteAllBytes("$certificatePath", $bytes)
          
          $signtool = "C:\Program Files (x86)\Microsoft SDKs\ClickOnce\SignTool\signtool.exe"
          & $signtool sign /f "$certificatePath" /td sha256 /fd SHA256 /tr http://timestamp.digicert.com /p "$env:WINDOWS_CERTIFICATE_PASSWORD" /n "Kaung Khant Kyaw" (get-item "dist\**\*.exe")
        env:
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}

      - name: Upload Windows exe
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: dist/**/*.exe

      - name: Zip Windows app
        shell: pwsh
        run: |
          Copy-Item -Path "windows\packaging\redistributables\*" -Destination "build\windows\x64\runner\Release" -Recurse
          Compress-Archive -Path "build\windows\x64\runner\Release\*" -DestinationPath "$env:APP_PREFIX-windows-x64.zip"

      - name: Upload zipped Windows app
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: ${{ env.APP_PREFIX }}-windows-x64.zip

      - name: Clean up
        shell: pwsh
        run: |
          if (test-path -Path "$env:RUNNER_TEMP\cert.pfx") {
              remove-item -Path "$env:RUNNER_TEMP\cert.pfx" -Force -ErrorAction SilentlyContinue
          }


  macos-app:
    name: "Create MacOS app"
    runs-on: macos-latest
    needs: prepare-release
    env:
      APP_PREFIX: ${{ needs.prepare-release.outputs.app_prefix }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
          cache-key: "flutter-:os:-:channel:-:version:-:arch:"
          pub-cache-key: "flutter-pub:os:-:channel:-:version:-:arch:"
          flutter-version: '3.29.2'

      - name: Resolving flutter dependencies
        run: flutter pub get

      - name: Resolving macos dependencies
        run: pod install --repo-update
        working-directory: macos

      - name: Remove build cache
        run: xcodebuild clean
        working-directory: macos

      - name: Build macOS
        run: flutter build macos --release

      - name: Build dmg
        run: bash scripts/build-dmg.sh
        env:
          APP_NAME: ${{ secrets.APP_NAME }}

      - name: Upload dmg
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: ${{ env.APP_PREFIX }}-macos-universal.dmg

      - name: Zip MacOS app
        working-directory: ./build/macos/Build/Products/Release
        run: zip -9 -r "${APP_PREFIX}-macos-universal.zip" pay_id.app

      - name: Upload MacOS zip
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: build/macos/Build/Products/Release/${{ env.APP_PREFIX }}-macos-universal.zip

  linux-amd64:
    name: Create linux amd64 app
    runs-on: ubuntu-latest
    needs: prepare-release
    env:
      APP_PREFIX: ${{ needs.prepare-release.outputs.app_prefix }}
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libgtk-3-dev liblzma-dev libstdc++-12-dev
          sudo apt-get install -y locate
          wget -O appimagetool "https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-x86_64.AppImage"
          chmod +x appimagetool
          mv appimagetool /usr/local/bin/

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
          cache-key: "flutter-:os:-:channel:-:version:-:arch:"
          pub-cache-key: "flutter-pub:os:-:channel:-:version:-:arch:"
          flutter-version: '3.29.2'

      - name: Install fastforge
        run: dart pub global activate fastforge

      - name: Build AppImage
        run: |
          fastforge package \
            --flutter-build-args "release" \
            --platform linux \
            --targets appimage \
            --artifact-name $APP_PREFIX-{{platform}}-amd64.{{ext}}

      - name: Upload AppImage
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: dist/**/*.AppImage

      - name: Build tar.gz
        run: |
          archiveName=""$APP_PREFIX"-linux-amd64.tar.gz"
          tar -czaf $archiveName ./*
        working-directory: build/linux/x64/release/bundle

      - name: Upload tar.gz
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: build/linux/x64/release/bundle/*.tar.gz

      - name: Build deb
        run: |
          rm -rf dist
          fastforge package \
            --flutter-build-args "release" \
            --platform linux \
            --targets deb \
            --artifact-name $APP_PREFIX-{{platform}}-amd64.{{ext}}

      - name: Upload deb
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: dist/**/*.deb

  linux-aarch64:
    name: Create linux aarch64 app
    runs-on: ubuntu-24.04-arm
    needs: prepare-release
    env:
      APP_PREFIX: ${{ needs.prepare-release.outputs.app_prefix }}
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libgtk-3-dev liblzma-dev libstdc++-12-dev
          sudo apt-get install -y locate libfuse2
          wget -O appimagetool "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-aarch64.AppImage"
          chmod +x appimagetool
          mv appimagetool /usr/local/bin/

      - name: Setup Flutter
        shell: bash
        run: |
          chmod +x ./scripts/install-flutter-github-actions.sh
          ./scripts/install-flutter-github-actions.sh

      - name: Install fastforge (supports AppImage build for arm)
        run: |
          dart pub global activate \
            --source git https://github.com/kjxbyz/fastforge \
            --git-ref appimage-arm64 \
            --git-path packages/fastforge

      - name: Build AppImage
        run: |
          fastforge package \
            --flutter-build-args "release" \
            --platform linux \
            --targets appimage \
            --artifact-name $APP_PREFIX-{{platform}}-aarch64.{{ext}}

      - name: Upload AppImage
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: dist/**/*.AppImage

      - name: Build tar.gz
        run: |
          archiveName=""$APP_PREFIX"-linux-aarch64.tar.gz"
          tar -czaf $archiveName ./*
        working-directory: build/linux/arm64/release/bundle

      - name: Upload tar.gz
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: build/linux/arm64/release/bundle/*.tar.gz

      - name: Build deb
        run: |
          rm -rf dist
          dart pub global deactivate fastforge
          dart pub global activate fastforge
          
          fastforge package \
            --flutter-build-args "release" \
            --platform linux \
            --targets deb \
            --artifact-name $APP_PREFIX-{{platform}}-aarch64.{{ext}}

      - name: Upload deb
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: dist/**/*.deb
